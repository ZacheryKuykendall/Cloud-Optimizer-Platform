









































    export_requirements()if __name__ == "__main__":    return {"status": "healthy"}async def health_check():@app.get("/health")        exit(1)        print(f"Failed to export requirements: {e}")    except Exception as e:        print(f"Successfully exported requirements to {output_file}")                    f.write(f"{package_name}{version_constraint}\n")                if package_name != "python":            for package_name, version_constraint in all_dependencies.items():        with open(output_file, "w") as f:        # Write dependencies to requirements.txt        all_dependencies = {**dependencies, **dev_dependencies}        dev_dependencies = poetry_config.get("dev-dependencies", {})        dependencies = poetry_config.get("dependencies", {})        # Resolve dependencies using Poetry's API        poetry_config = pyproject_toml.poetry_config        pyproject_toml = PyProjectTOML(pyproject_path)            raise FileNotFoundError("pyproject.toml not found.")        if not pyproject_path.exists():        pyproject_path = Path("pyproject.toml")        # Load pyproject.toml    try:def export_requirements(output_file="requirements.txt"):app = FastAPI()from fastapi import FastAPIfrom pathlib import Pathfrom poetry.core.pyproject.toml import PyProjectTOMLfrom poetry.core.packages.locker import Lockerfrom poetry.core.masonry.api import build_requiresimport toml