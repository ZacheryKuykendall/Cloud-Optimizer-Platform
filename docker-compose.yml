version: '3.8'

services:
  api-gateway:
    build:
      context: .
      dockerfile: api-gateway/Dockerfile
    ports:
      - "8000:8000"
    environment:
      - PYTHON_ENV=development
      - COST_ANALYZER_SERVICE=http://cost-analyzer:8000
      - RESOURCE_OPTIMIZER_SERVICE=http://resource-optimizer:8000
      - CLOUD_COST_NORMALIZATION_SERVICE=http://cloud-cost-normalization:8000
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      - cost-analyzer
      - resource-optimizer
      - cloud-cost-normalization

  cost-analyzer:
    build:
      context: .
      dockerfile: cost-analyzer/Dockerfile
    environment:
      - PYTHON_ENV=development
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  resource-optimizer:
    build:
      context: .
      dockerfile: resource-optimizer/Dockerfile
    environment:
      - PYTHON_ENV=development
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  cloud-cost-normalization:
    build:
      context: .
      dockerfile: cloud-cost-normalization/Dockerfile
    environment:
      - PYTHON_ENV=development
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  cost-data-storage-service:
    build:
      context: .
      dockerfile: cost-data-storage-service/Dockerfile
    ports:
      - "8001:8001"

  cloud-resource-inventory:
    build:
      context: .
      dockerfile: cloud-resource-inventory/Dockerfile
    ports:
      - "8002:8002"

  cloud-network-manager:
    build:
      context: .
      dockerfile: cloud-network-manager/Dockerfile
    ports:
      - "8003:8003"

networks:
  default:
    name: cloud-optimizer-network
    driver: bridge
