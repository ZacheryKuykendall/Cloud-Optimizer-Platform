[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "cloud-compliance-manager"
version = "0.1.0"
description = "A Python library for managing and monitoring cloud compliance across different providers"
readme = "README.md"
requires-python = ">=3.8"
license = "MIT"
keywords = ["cloud", "compliance", "security", "aws", "azure", "gcp", "finops", "cis", "hipaa", "pci"]
authors = [
    { name = "Your Name", email = "your.email@example.com" }
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
]
dependencies = [
    "boto3>=1.26.0",                        # AWS SDK
    "aws-config>=1.0.0",                    # AWS Config
    "aws-securityhub>=1.0.0",              # AWS Security Hub
    "aws-guardduty>=1.0.0",                # AWS GuardDuty
    "azure-mgmt-security>=3.0.0",          # Azure Security Center
    "azure-mgmt-policyinsights>=1.0.0",    # Azure Policy Insights
    "azure-mgmt-monitor>=5.0.0",           # Azure Monitor
    "azure-identity>=1.7.0",               # Azure Authentication
    "google-cloud-security>=1.0.0",        # GCP Security Command Center
    "google-cloud-audit-logs>=1.0.0",      # GCP Audit Logs
    "google-cloud-asset>=3.0.0",           # GCP Asset Inventory
    "pydantic>=2.0.0",                     # Data validation
    "sqlalchemy>=2.0.0",                   # Database operations
    "alembic>=1.9.0",                      # Database migrations
    "click>=8.0.0",                        # CLI interface
    "rich>=13.0.0",                        # Rich terminal output
    "pyyaml>=6.0.0",                       # YAML parsing
    "jinja2>=3.0.0",                       # Template rendering
    "aiohttp>=3.8.0",                      # Async HTTP client
    "schedule>=1.1.0",                     # Task scheduling
    "apscheduler>=3.9.0",                  # Advanced task scheduling
    "prometheus-client>=0.16.0",           # Metrics collection
    "cryptography>=40.0.0",                # Cryptographic operations
    "python-jose>=3.3.0",                  # JWT handling
    "requests>=2.28.0",                    # HTTP client
    "jsonschema>=4.17.0",                  # JSON Schema validation
    "deepdiff>=6.2.0",                     # Deep difference calculation
    "networkx>=3.0.0",                     # Graph operations
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-asyncio>=0.21.0",
    "black>=22.0.0",
    "isort>=5.0.0",
    "mypy>=1.0.0",
    "pylint>=2.15.0",
    "pytest-mock>=3.10.0",
]

[project.scripts]
cloudcomp = "cloud_compliance_manager.cli:main"

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
addopts = "-ra -q --cov=src"

[tool.black]
line-length = 88
target-version = ["py38"]
include = '\.pyi?$'

[tool.isort]
profile = "black"
multi_line_output = 3

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true

[tool.pylint.messages_control]
disable = ["C0111", "C0103"]

[tool.pylint.format]
max-line-length = 88
