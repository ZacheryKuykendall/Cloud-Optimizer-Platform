[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "cost-estimation-engine"
version = "0.1.0"
description = "An engine for estimating and predicting cloud resource costs across different providers"
readme = "README.md"
requires-python = ">=3.8"
license = "MIT"
keywords = ["cloud", "cost", "estimation", "prediction", "finops"]
authors = [
    { name = "Your Name", email = "your.email@example.com" }
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
]
dependencies = [
    # Cloud Provider SDKs
    "boto3>=1.26.0",
    "azure-mgmt-commerce>=1.0.0",
    "azure-mgmt-consumption>=9.0.0",
    "google-cloud-billing>=1.9.0",
    "google-cloud-billing-budgets>=1.8.0",

    # Data Processing
    "pandas>=1.5.0",
    "numpy>=1.23.0",
    "scipy>=1.9.0",
    "pyarrow>=12.0.0",

    # Machine Learning
    "scikit-learn>=1.2.0",
    "xgboost>=1.7.0",
    "lightgbm>=3.3.0",
    "prophet>=1.1.0",
    "tensorflow>=2.12.0",
    "torch>=2.0.0",

    # Time Series Analysis
    "statsmodels>=0.13.0",
    "pmdarima>=2.0.0",

    # Data Validation
    "pydantic>=2.0.0",
    "jsonschema>=4.17.0",

    # API and Services
    "fastapi>=0.95.0",
    "uvicorn>=0.21.0",
    "httpx>=0.23.0",
    "aiohttp>=3.8.0",

    # Database
    "sqlalchemy>=2.0.0",
    "alembic>=1.11.0",
    "psycopg2-binary>=2.9.0",
    "redis>=4.5.0",

    # Caching and Performance
    "cachetools>=5.3.0",
    "joblib>=1.2.0",
    "dask>=2023.3.0",
    "distributed>=2023.3.0",

    # Monitoring and Metrics
    "prometheus-client>=0.16.0",
    "opentelemetry-api>=1.18.0",
    "opentelemetry-sdk>=1.18.0",

    # Utilities
    "python-dateutil>=2.8.2",
    "pytz>=2022.1",
    "tenacity>=8.0.1",
    "pyyaml>=6.0",
    "jmespath>=1.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-mock>=3.10.0",
    "black>=22.0.0",
    "isort>=5.0.0",
    "mypy>=1.0.0",
    "pylint>=2.15.0",
    "pytest-benchmark>=4.0.0",  # Performance testing
    "pytest-timeout>=2.1.0",    # Test timeouts
    "pytest-xdist>=3.2.0",      # Parallel testing
    "hypothesis>=6.75.3",       # Property-based testing
    "faker>=18.0.0",           # Test data generation
    "responses>=0.23.0",       # HTTP mocking
    "moto>=4.1.0",            # AWS mocking
    "freezegun>=1.2.0",       # Time mocking
]

[project.scripts]
costestimate = "cost_estimation.cli:main"

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
addopts = "-ra -q --cov=src"

[tool.black]
line-length = 88
target-version = ["py38"]
include = '\.pyi?$'

[tool.isort]
profile = "black"
multi_line_output = 3

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true

[tool.pylint.messages_control]
disable = ["C0111", "C0103"]

[tool.pylint.format]
max-line-length = 88
