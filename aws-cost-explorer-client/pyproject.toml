[tool.poetry]
name = "aws-cost-explorer-client"
version = "0.1.0"
description = "AWS Cost Explorer API client for retrieving and analyzing AWS cost data"
authors = ["Your Name <your.email@example.com>"]
license = "MIT"
readme = "README.md"
packages = [{include = "aws_cost_explorer", from = "src"}]

[tool.poetry.dependencies]
python = "^3.9"
boto3 = "^1.34.5"
pydantic = "^2.5.3"
python-dateutil = "^2.8.2"
tenacity = "^8.2.3"  # For retries
cachetools = "^5.3.2"  # For caching responses
aiohttp = "^3.9.1"  # For async support
structlog = "^23.2.0"  # For structured logging

[tool.poetry.group.dev.dependencies]
pytest = "^7.4.3"
pytest-asyncio = "^0.23.2"
pytest-cov = "^4.1.0"
pytest-mock = "^3.12.0"
moto = "^4.2.12"  # AWS mocking
black = "^23.12.1"
isort = "^5.13.2"
mypy = "^1.8.0"
pylint = "^3.0.3"
types-python-dateutil = "^2.8.19.14"
types-cachetools = "^5.3.0.7"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 100
target-version = ["py39"]
include = '\.pyi?$'

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true

[tool.pylint.messages_control]
disable = [
    "C0111",  # missing-docstring
    "C0103",  # invalid-name
    "C0330",  # bad-continuation
    "C0326",  # bad-whitespace
    "W0511",  # fixme
]

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --cov=aws_cost_explorer --cov-report=term-missing"
testpaths = [
    "tests",
]
asyncio_mode = "auto"

[tool.coverage.run]
branch = true
source = ["aws_cost_explorer"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "pass",
    "raise ImportError",
]
