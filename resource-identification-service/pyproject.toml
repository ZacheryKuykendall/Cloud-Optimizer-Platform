[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "resource-identification-service"
version = "0.1.0"
description = "A service for identifying and classifying cloud resources across different providers"
readme = "README.md"
requires-python = ">=3.8"
license = "MIT"
keywords = ["cloud", "resources", "identification", "classification", "finops"]
authors = [
    { name = "Your Name", email = "your.email@example.com" }
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
]
dependencies = [
    # AWS SDK
    "boto3>=1.26.0",
    "boto3-stubs[essential]>=1.26.0",

    # Azure SDK
    "azure-mgmt-resource>=22.0.0",
    "azure-mgmt-compute>=29.0.0",
    "azure-mgmt-network>=22.0.0",
    "azure-mgmt-storage>=21.0.0",
    "azure-identity>=1.12.0",

    # GCP SDK
    "google-cloud-resource-manager>=1.10.0",
    "google-cloud-compute>=1.10.0",
    "google-cloud-storage>=2.8.0",
    "google-auth>=2.16.0",

    # Core Dependencies
    "pydantic>=2.0.0",           # Data validation
    "fastapi>=0.95.0",           # API framework
    "uvicorn>=0.21.0",          # ASGI server
    "httpx>=0.23.0",            # HTTP client
    "tenacity>=8.0.1",          # Retry handling
    "aiohttp>=3.8.0",           # Async HTTP client
    "prometheus-client>=0.16.0", # Metrics
    "opentelemetry-api>=1.18.0", # Telemetry
    "opentelemetry-sdk>=1.18.0", # Telemetry

    # Database
    "sqlalchemy>=2.0.0",        # ORM
    "alembic>=1.11.0",         # Migrations
    "psycopg2-binary>=2.9.0",  # PostgreSQL adapter
    "redis>=4.5.0",            # Caching

    # Resource Analysis
    "networkx>=3.0",           # Graph analysis
    "pandas>=1.5.0",           # Data analysis
    "scikit-learn>=1.2.0",     # Machine learning
    "nltk>=3.8.0",            # Natural language processing
    "spacy>=3.5.0",           # NLP for resource classification

    # Utilities
    "python-dateutil>=2.8.2",  # Date utilities
    "pytz>=2022.1",           # Timezone handling
    "pyyaml>=6.0",            # YAML parsing
    "jmespath>=1.0.0",        # JSON querying
    "jsonschema>=4.17.0",     # JSON schema validation
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-mock>=3.10.0",
    "black>=22.0.0",
    "isort>=5.0.0",
    "mypy>=1.0.0",
    "pylint>=2.15.0",
    "pytest-recording>=0.12.0",  # For recording API responses
    "vcrpy>=4.2.0",             # HTTP interaction recording
    "docker>=6.1.0",            # For integration tests
    "moto>=4.1.0",              # AWS mocking
    "responses>=0.23.0",        # HTTP mocking
]

[project.scripts]
resourceid = "resource_identification.cli:main"

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
addopts = "-ra -q --cov=src"

[tool.black]
line-length = 88
target-version = ["py38"]
include = '\.pyi?$'

[tool.isort]
profile = "black"
multi_line_output = 3

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true

[tool.pylint.messages_control]
disable = ["C0111", "C0103"]

[tool.pylint.format]
max-line-length = 88
